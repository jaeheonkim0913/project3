#!/usr/bin/env python3

import argparse
import copy
from itertools import combinations
from operator import truediv
from re import X
import socket
import json
import select

# convert ip address to 32-bit


def ipToBin(ip: str) -> str:
    result = ''
    tmp = ip.split('.')

    for x in tmp:
        result += format(int(x), '08b')
    return result

# convert 32bit to ip address


def binToIp(bin: str) -> str:
    x = 0
    result = ''
    while x < 31:
        result += str(int(bin[x:x+8], 2))
        result += '.'
        x += 8
    result = result[:len(result) - 2]
    return result


class Router:

    # sockets that the router is connected to
    sockets = {}
    # available ports
    ports = {}
    # routing table of the router
    routingTable = {}
    # update log of routing table
    routingTableLog = []
    # holds neighbor relationship information, can be customer, peer, etc.
    relations = {}
    # withdraw log
    withdrawLog = []

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(
                socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            # handshake
            self.send(neighbor, json.dumps({"type": "handshake", "src": self.our_addr(
                neighbor), "dst": neighbor, "msg": {}}))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode(
            'utf-8'), ('localhost', self.ports[network]))

    # updating forwarding table, and also saving a copy of data

    def updateTable(self, src, data):
        self.routingTableLog.append(data)
        if src not in self.routingTable:
            self.routingTable[src] = []
        self.routingTable[src].append(data['msg'])
        # aggregate routing table
        self.aggregate()

    # handling route announcement messages
    def announce(self, src, data, update):
        def forwardMessage(dst):
            # handles announcing of update or withdraw message
            if update:
                tmpUpdate = copy.deepcopy(data['msg'])
                tmpUpdate['ASPath'].insert(0, self.asn)
                tmpUpdate.pop('localpref', None)
                tmpUpdate.pop('origin', None)
                tmpUpdate.pop('selfOrigin', None)
            else:
                tmpUpdate = data['msg']
            packet = {
                'src': self.our_addr(dst),
                'dst': dst,
                'type': 'update' if update else 'withdraw',
                'msg': tmpUpdate
            }
            return json.dumps(packet)

        for h in self.sockets.keys():
            # checks that they are customers, otherwise the announcement is not sent.
            if h != src and (self.relations[h] == 'cust' or self.relations[src] == 'cust'):
                self.send(h, forwardMessage(h))

    # handles withdrawing

    def withdraw(self, data):
        # saves a copy of the revocation message,
        self.withdrawLog.append(data)

        # remove revoked entries in routing table
        updateMsg = list(map(lambda update: update['msg'], list(
            filter(lambda update: update['src'] == data['src'], self.routingTableLog))))
        withdrawLists = list(map(lambda withdraw: withdraw['msg'], list(
            filter(lambda withdraw: withdraw['src'] == data['src'], self.withdrawLog))))
        withdraw = ([withdrawItem for srcWdList in withdrawLists
                     for withdrawItem in srcWdList])

        for withdrawNetwork, withdrawNetmask in map(lambda wdItem: wdItem.values(), withdraw):

            updateMsg = ([msg for msg in updateMsg
                          if msg['network'] != withdrawNetwork or msg['netmask'] != withdrawNetmask])
        self.routingTable[data['src']] = updateMsg
        # aggregate table again
        self.aggregate(target=data['src'])

    # handles sending data
    def sendData(self, src, data):
        # find the possible destination(s) by iterating through entire routing table
        def findDest(destination):
            result = []
            for neighbor, route in self.routingTable.items():
                for r in route:
                    length = 0
                    for netmask, expect, actual in zip(ipToBin(r['netmask']), ipToBin(r['network']), ipToBin(destination)):
                        netmask = int(netmask)
                        expect = int(expect)
                        actual = int(actual)
                        if bool(netmask) and (expect == actual):
                            length += 1
                        elif bool(netmask) and (expect != actual):
                            break
                        else:
                            result.append((neighbor, length, r))
                            break
            return result

        # given routes, find the best route depending on conditions, funneling behavior.
        def bestRoute(routes):
            # longest prefix,
            longest = max(list(map(lambda x: x[1], routes)))
            best = list(filter(lambda x: x[1] == longest, routes))
            if len(best) == 1:
                return best[0]
            # highest local pref,
            localPref = max(list(map(lambda x: x[2]['localpref'], best)))
            best = list(filter(lambda x: x[2]['localpref'] == localPref, best))
            if len(best) == 1:
                return best[0]
            # selforigin as true
            selfOrigin = list(filter(lambda x: x[2]['selfOrigin'], best))
            if selfOrigin:
                best = selfOrigin
            if len(best) == 1:
                return best[0]
            # shortest aspath
            shortest = min(list(map(lambda x: len(x[2]['ASPath']), best)))
            best = list(filter(lambda x: len(
                x[2]['ASPath']) == shortest, best))
            if len(best) == 1:
                return best[0]
            # best origin, IGP>EGP>UNK
            IGPOrigin = list(filter(lambda x: x[2]['origin'] == "IGP", best))
            EGPOrigin = list(filter(lambda x: x[2]['origin'] == "EGP", best))
            UNKOrigin = list(filter(lambda x: x[2]['origin'] == "UNK", best))

            if (IGPOrigin):
                best = IGPOrigin
            elif (EGPOrigin):
                best = EGPOrigin
            else:
                best = UNKOrigin
            if len(best) == 1:
                return best[0]
            # entry neighbor with lowest IP address
            return min(best, key=lambda x: x[0])

        destination = data['dst']

        # no route message used in the case that data cannot be sent.
        def noRoute():
            packet = {
                'src': self.our_addr(src),
                'dst': data['src'],
                'type': 'no route',
                'msg': {},
            }
            packet = json.dumps(packet)
            return packet

        # if neither dest or source is a customer, drop data
        if not findDest(destination):
            destination = src
            msg = noRoute()
        else:
            destination = bestRoute(findDest(destination))[0]
            msg = json.dumps(data)
        if (self.relations[src] != 'cust' and self.relations[destination] != 'cust'):
            destination = src
            msg = noRoute()
        self.send(destination, msg)

    # sends copy of routing table back if requested
    def dump(self, src):
        # rewrite routing table, basically just making each route a single entry
        def expandRoutingTable(routingTable):
            result = []
            for neighbor, routes in routingTable.items():
                for route in routes:
                    result.append((neighbor, route))
            return result

        data = []
        for x in expandRoutingTable(self.routingTable):
            data.append({
                "peer": x[0],
                "network": x[1]["network"],
                "netmask": x[1]["netmask"],
                "localpref": x[1]["localpref"],
                "origin": x[1]["origin"],
                "selfOrigin": x[1]["selfOrigin"],
                "ASPath": x[1]["ASPath"],
            })
        table = {
            "src": self.our_addr(src),
            "dst": src,
            "type": "table",
            "msg": data
        }
        msg = json.dumps(table)
        self.send(src, msg)

    def aggregate(self, target=None):

        # checks if there is a specific target for the aggregation, if not aggregate the entire routing table.
        if (target):
            aggregateTargets = [target]
        else:
            aggregateTargets = self.routingTable.keys()
        # interate through every neighbor in available targets
        for neighbor in aggregateTargets:
            for i in range(len(self.routingTable[neighbor]) - 1):
                flag = False
                curRoutes = self.routingTable[neighbor]
                # checks if the neighbors have same attributes
                for (neighborOne, neighborTwo) in list(combinations(curRoutes, 2)):
                    if (neighborOne['origin'] == neighborTwo['origin']
                       and neighborOne['selfOrigin'] == neighborTwo['selfOrigin']
                       and neighborOne['localpref'] == neighborTwo['localpref']
                       and neighborOne['ASPath'] == neighborTwo['ASPath']
                       and neighborOne['netmask'] == neighborTwo['netmask']):
                        # checks if neighbors are adjacent
                        tmp = ipToBin(neighborOne['netmask']).rfind('1')
                        if (ipToBin(neighborOne['network'])[:tmp] == ipToBin(neighborTwo['network'])[:tmp]):
                            netmaskNeighborOne = ipToBin(
                                neighborOne['netmask']).rfind('1')
                            aggregateBackToIP = binToIp(ipToBin(neighborOne['netmask'])[
                                                        :netmaskNeighborOne] + '0' + ipToBin(neighborOne['netmask'])[netmaskNeighborOne + 1:])

                            if neighborOne['network'] < neighborTwo['network']:
                                lowNet = neighborOne['network']
                            else:
                                lowNet = neighborTwo['network']

                            result = {
                                'network': lowNet,
                                'netmask': aggregateBackToIP,
                                'localpref': neighborOne['localpref'],
                                'origin': neighborOne['origin'],
                                'selfOrigin': neighborOne['selfOrigin'],
                                'ASPath': neighborOne['ASPath'],
                            }
                            # aggregate, add merged routs and remove old routes that are redundant.
                            self.routingTable[neighbor].append(result)
                            self.routingTable[neighbor].remove(neighborOne)
                            self.routingTable[neighbor].remove(neighborTwo)
                            flag = True
                            break
                if not flag:
                    break

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))

                data = json.loads(msg)
                type = data['type']
                # checks given data's type. update, withdraw, data and dump
                if type == 'update':
                    self.updateTable(srcif, data)
                    self.announce(srcif, data, True)
                elif type == 'withdraw':
                    self.withdraw(data)
                    self.announce(srcif, data, False)
                elif type == 'data':
                    self.sendData(srcif, data)
                elif type == 'dump':
                    self.dump(srcif)
                else:
                    raise Exception("invalid data type error")
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections',
                        type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
