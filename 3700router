#!/usr/bin/env python3

import argparse
import copy
import socket
import time
import json
import select
import struct
import sys
import math


class Router:

    relations = {}
    sockets = {}
    ports = {}
    routingTable = {}
    routingTableLog = []

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(
                socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({"type": "handshake", "src": self.our_addr(
                neighbor), "dst": neighbor, "msg": {}}))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode(
            'utf-8'), ('localhost', self.ports[network]))

    def updateTable(self, src, data):
        self.routingTableLog.append(data)
        if src not in self.routingTable:
            self.routingTable[src] = []
        self.routingTable[src].append(data['msg'])

    def announce(self, src, packet, update):
        def forwardMessage(dst):

            if update:
                tmpUpdate = copy.deepcopy(packet['msg'])
                tmpUpdate['ASPath'].insert(0, self.asn)
                tmpUpdate.pop('localpref', None)
                tmpUpdate.pop('origin', None)
                tmpUpdate.pop('selfOrigin', None)
            else:
                tmpUpdate = packet['msg']
            packet = {
                'src': self.our_addr(dst),
                'dst': dst,
                'type': 'update' if update else 'withdraw',
                'msg': tmpUpdate


            }
            return json.dumps(packet)

        for h in self.sockets.keys():
            # second part assumed true
            if h != src and (self.relations[h] == 'cust' or self.relations[src] == 'cust'):
                self.send(h, forwardMessage(h))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))

                data = json.loads(msg)
                type = data['type']
                if type == 'update':
                    self.updateTable(srcif, data)
                    self.announce(srcif, data, True)

                elif type == 'withdraw':
                    ...
                elif type == 'data':
                    ...
                elif type == 'dump':
                    ...
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections',
                        type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
